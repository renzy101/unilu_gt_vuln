using Amazon.Runtime.Internal;
using CsvHelper;
using CsvHelper.Configuration;
using MongoDB.Driver;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Formats.Asn1;
using System.Globalization;
using System.Linq;
using System.Net.Http.Headers;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using static System.Formats.Asn1.AsnWriter;

namespace GTVulnPrioritizer
{
    public class VulnerabilitySource 
    {
        private static OpenAIClient _openAIClient;

        public VulnerabilitySource( OpenAIClient openAIClient) {

            _openAIClient = openAIClient;
        }
        public List<Vulnerability> GetVulnerabilities(string e)
        {
            throw new NotImplementedException();
        }

        public Vulnerability GetVulnerability(string e)
        {
            try
            {
                var httpClient = new HttpClient();

                var request = new HttpRequestMessage(HttpMethod.Get, "https://api.securitycenter.microsoft.com/api/alerts");

                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", "");

                var response = httpClient.SendAsync(request).GetAwaiter().GetResult();
            }
            catch (Exception ex)
            {

            }
            throw new NotImplementedException();
        }

        private static async Task<List<Vulnerability>> ProcessRepositoriesAsync(HttpClient client)
        {
            throw new NotImplementedException();

        }
        public List<Vulnerability> ReadCsvFile(string filePath)
        {
            var config = new CsvConfiguration(CultureInfo.InvariantCulture)

            {
                HasHeaderRecord = true,
            };
            var cultureInfo = new CultureInfo("de-DE");

            using (var reader = new StreamReader(filePath))
            using (var csv = new CsvReader(reader, config))
            {
                var records = new List<Vulnerability>();
                csv.Read();
                csv.ReadHeader();
                while (csv.Read())
                {

                    try
                    {


                        var record = new Vulnerability();
                        string cve = csv.GetField<string>("Name");
                        record.CVE = cve;
                        string description = csv.GetField<string>("Description");
                        record.Description = description;
                        record.Severity = csv.GetField<string>("Severity") ?? "";
                        string cvss = csv.GetField<string>("CVSS v3");
                        record.CVSSv3 = string.IsNullOrEmpty(cvss) ? 0: Convert.ToDecimal(cvss);
                        string epssScore = csv.GetField<string>("Epss score");
                        record.EPSS = string.IsNullOrEmpty(epssScore) ? GetEPSSAsync(cve).GetAwaiter().GetResult().Value : Convert.ToDecimal(epssScore);
                        record.Age = csv.GetField<int>("Age (days)");
                        record.FirstDetected = DateTime.Parse(csv.GetField<string>("First detected"), cultureInfo, DateTimeStyles.NoCurrentDateDefault);
                        record.Updated = DateTime.Parse(csv.GetField<string>("Updated"), cultureInfo, DateTimeStyles.NoCurrentDateDefault);
                        record.HasExploit = csv.GetField<bool>("Has Exploit");
                        record.HasKnownThreats = csv.GetField<bool>("Has Known Threats");
                        record.HasAssociatedAlerts = csv.GetField<bool>("Has Associated Alerts");
                        string relatedSoftware = csv.GetField<string>("Related Software");

                        record.RelatedSoftware = string.IsNullOrEmpty(relatedSoftware) ? "" : relatedSoftware;

                        string exposedMachines = csv.GetField<string>("Exposed Machines");
                        record.ExposedMachines = string.IsNullOrEmpty(exposedMachines) ? 0 : Convert.ToInt32(exposedMachines);

                        record.DescEmbeddingOptimised =  _openAIClient.GetEmbeddingAsync(description).GetAwaiter().GetResult();
                        records.Add(record);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error reading record: {ex.Message}");
                    }
                }
                return records;
            }
        }
        public void InsertIntoMongoDB(List<Vulnerability> vulnerabilities, string connectionString, string databaseName, string collectionName)
        {
            var client = new MongoClient(connectionString);
            var database = client.GetDatabase(databaseName);
            var collection = database.GetCollection<Vulnerability>(collectionName);

            collection.InsertMany(vulnerabilities);
            Console.WriteLine("Data successfully inserted into MongoDB!");
        }

        public static async Task<decimal?> GetEPSSAsync(string cve)
        {
            using (var httpClient = new HttpClient())
            {
                try
                {
                    var apiUrl = $"https://api.first.org/data/v1/epss?cve={cve}";
                    var response = await httpClient.GetAsync(apiUrl);

                    if (response.IsSuccessStatusCode)
                    {
                        var jsonString = await response.Content.ReadAsStringAsync();
                        var jsonObject = JObject.Parse(jsonString);
                        var data = jsonObject["data"].FirstOrDefault();
                        var epssString = data["epss"]?.Value<string>();
                        var epss = string.IsNullOrEmpty(epssString) ? 0 : Convert.ToDecimal(epssString);

                        return epss;
                    }
                    else
                    {
                        Console.WriteLine($"Failed to fetch EPSS for CVE {cve}. Status code: {response.StatusCode}");
                        return 0;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Exception occurred while fetching EPSS for CVE {cve}: {ex.Message}");
                    return 0;
                }
            }
        }

    }


}
