using MongoDB.Bson;
using MongoDB.Driver;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace GTVulnPrioritizer
{
    public class VulnerabilityPrioritizer
    {
        private static OpenAIClient _openAIClient;
        private static readonly HttpClient client = new HttpClient();

        public VulnerabilityPrioritizer(OpenAIClient openAIClient)
        {
            _openAIClient = openAIClient;
            
        }
      

        public string GetVulnerabilityPriority(string query, IMongoCollection<BsonDocument> vulnerabilityCollection)
        {
            List<BsonDocument> getKnowledge = VectorSearch(query, vulnerabilityCollection).GetAwaiter().GetResult();
            string searchResult = "";
            foreach (var result in getKnowledge)
            {
                searchResult += $"CVE: {result.GetValue("CVE", "N/A")}, Description: {result.GetValue("Description", "N/A")}\n";
            }

            string completion =  _openAIClient.GetCompletionAsync(query, searchResult).GetAwaiter().GetResult();

            return completion;
         
        }

      

        public static async Task<List<BsonDocument>> VectorSearch(string query, IMongoCollection<BsonDocument> vulnerabilityCollection)
        {
            List<BsonDocument> pResults = new List<BsonDocument>();
            try
            {
                var queryEmbedding = await _openAIClient.GetEmbeddingAsync(query);

                if (queryEmbedding == null)
                {
                    Console.WriteLine("Invalid query or embedding generation failed.");
                    return new List<BsonDocument>();
                }
                BsonDocument pipelineStage1 = new BsonDocument{
            {
                "$vectorSearch", new BsonDocument{

                    { "index", "vector_index" },
                    { "queryVector", new BsonArray(queryEmbedding) },
                    { "path", "DescEmbeddingOptimised" },
                    { "numCandidates", 150 },
                    { "limit", 10 }

                }
            }
            };
                BsonDocument pipelineStage2 = new BsonDocument{
                {
                    "$project", new BsonDocument{
                        { "_id", 1 },
                        { "DescEmbeddingOptimised", 0 },
                        //{ "CVE", 1 },
                        //{ "CVSSv3", 1 },
                        //{ "EPSS", 1 },
                        //{ "Severity", 1 },
                        //{ "Description", 1 },
                        { "score", new BsonDocument
                            { 
                                {"$meta", "vectorSearchScore" } 
                            } 
                        }

                }
            }
            };

                BsonDocument[] pipeline = new BsonDocument[] {
                pipelineStage1,
                pipelineStage2
            };




                pResults = vulnerabilityCollection.Aggregate<BsonDocument>(pipeline).ToList();
                foreach (BsonDocument pResult in pResults)
                {
                    Console.WriteLine(pResult);
                    return pResults;

                }
            }
            catch (Exception ex) {
                Console.WriteLine(ex.ToString());
            }
            //var results = await collection.Aggregate<Vulnerability>(pipeline).ToListAsync();
            return pResults;

        }

    }
    
}
